// Code generated by go-swagger; DO NOT EDIT.

package wireguard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wireguard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wireguard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProfile(params *CreateProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProfileOK, error)

	DeleteProfile(params *DeleteProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProfileNoContent, error)

	GetProfile(params *GetProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProfileOK, error)

	GetProfiles(params *GetProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProfilesOK, error)

	UpdateProfile(params *UpdateProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateProfile creates new wire guard profile
*/
func (a *Client) CreateProfile(params *CreateProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProfile",
		Method:             "POST",
		PathPattern:        "/wg/profiles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteProfile deletes wire guarg profile
*/
func (a *Client) DeleteProfile(params *DeleteProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProfile",
		Method:             "DELETE",
		PathPattern:        "/wg/profiles/{profileId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetProfile retrieves wire guarg profile
*/
func (a *Client) GetProfile(params *GetProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProfile",
		Method:             "GET",
		PathPattern:        "/wg/profiles/{profileId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetProfiles retrieves list of wire guard profiles
*/
func (a *Client) GetProfiles(params *GetProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProfiles",
		Method:             "GET",
		PathPattern:        "/wg/profiles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateProfile updates profile
*/
func (a *Client) UpdateProfile(params *UpdateProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProfile",
		Method:             "PATCH",
		PathPattern:        "/wg/profiles/{profileId}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
