// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WireGuardPeer wire guard peer
//
// swagger:model WireGuardPeer
type WireGuardPeer struct {

	// allowed ips
	// Required: true
	AllowedIps []string `json:"allowed_ips"`

	// blocked at
	// Format: date-time
	BlockedAt *strfmt.DateTime `json:"blocked_at,omitempty"`

	// endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// persistent keepalive
	PersistentKeepalive *int64 `json:"persistent_keepalive,omitempty"`

	// preshared key
	PresharedKey *string `json:"preshared_key,omitempty"`

	// private key
	PrivateKey *string `json:"private_key,omitempty"`

	// public key
	// Required: true
	PublicKey *string `json:"public_key"`
}

// Validate validates this wire guard peer
func (m *WireGuardPeer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WireGuardPeer) validateAllowedIps(formats strfmt.Registry) error {

	if err := validate.Required("allowed_ips", "body", m.AllowedIps); err != nil {
		return err
	}

	return nil
}

func (m *WireGuardPeer) validateBlockedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("blocked_at", "body", "date-time", m.BlockedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WireGuardPeer) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *WireGuardPeer) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("public_key", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this wire guard peer based on context it is used
func (m *WireGuardPeer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WireGuardPeer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WireGuardPeer) UnmarshalBinary(b []byte) error {
	var res WireGuardPeer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
