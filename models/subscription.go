// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
//
// swagger:model Subscription
type Subscription struct {

	// active
	Active bool `json:"active"`

	// bundle id
	BundleID string `json:"bundle_id,omitempty"`

	// cancellation date
	// Format: date-time
	CancellationDate *strfmt.DateTime `json:"cancellation_date,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// expires date
	// Format: date-time
	ExpiresDate *strfmt.DateTime `json:"expires_date,omitempty"`

	// is in intro offer period
	IsInIntroOfferPeriod bool `json:"is_in_intro_offer_period"`

	// is trial period
	IsTrialPeriod bool `json:"is_trial_period"`

	// is upgraded
	IsUpgraded bool `json:"is_upgraded"`

	// name
	Name string `json:"name,omitempty"`

	// product id
	ProductID string `json:"product_id,omitempty"`

	// promotional offer id
	PromotionalOfferID string `json:"promotional_offer_id,omitempty"`

	// purchase date
	// Format: date-time
	PurchaseDate *strfmt.DateTime `json:"purchase_date,omitempty"`

	// qunatity
	Qunatity int64 `json:"qunatity,omitempty"`

	// reorder
	Reorder bool `json:"reorder"`

	// source
	Source string `json:"source,omitempty"`

	// subscription id
	// Format: uuid
	SubscriptionID strfmt.UUID `json:"subscription_id,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validateCancellationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("cancellation_date", "body", "date-time", m.CancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateExpiresDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expires_date", "body", "date-time", m.ExpiresDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validatePurchaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PurchaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("purchase_date", "body", "date-time", m.PurchaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSubscriptionID(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionID) { // not required
		return nil
	}

	if err := validate.FormatOf("subscription_id", "body", "uuid", m.SubscriptionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subscription based on context it is used
func (m *Subscription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
