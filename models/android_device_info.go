// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AndroidDeviceInfo android device info
//
// swagger:model AndroidDeviceInfo
type AndroidDeviceInfo struct {

	// android Id
	AndroidID string `json:"androidId,omitempty"`

	// board
	Board string `json:"board,omitempty"`

	// bootloader
	Bootloader string `json:"bootloader,omitempty"`

	// brand
	Brand string `json:"brand,omitempty"`

	// device
	Device string `json:"device,omitempty"`

	// display
	Display string `json:"display,omitempty"`

	// fingerprint
	Fingerprint string `json:"fingerprint,omitempty"`

	// hardware
	Hardware string `json:"hardware,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is physical device
	IsPhysicalDevice string `json:"isPhysicalDevice,omitempty"`

	// manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// model
	Model string `json:"model,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// supported abis
	SupportedAbis string `json:"supportedAbis,omitempty"`

	// supported 32bit abis
	Supported32bitAbis string `json:"supported_32bit_abis,omitempty"`

	// supported 64bit abis
	Supported64bitAbis string `json:"supported_64bit_abis,omitempty"`

	// system features
	SystemFeatures string `json:"systemFeatures,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// version
	Version *AndroidDeviceInfoVersion `json:"version,omitempty"`
}

// Validate validates this android device info
func (m *AndroidDeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AndroidDeviceInfo) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this android device info based on the context it is used
func (m *AndroidDeviceInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AndroidDeviceInfo) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {
		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AndroidDeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AndroidDeviceInfo) UnmarshalBinary(b []byte) error {
	var res AndroidDeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AndroidDeviceInfoVersion android device info version
//
// swagger:model AndroidDeviceInfoVersion
type AndroidDeviceInfoVersion struct {

	// base os
	BaseOs string `json:"base_os,omitempty"`

	// incremental
	Incremental string `json:"incremental,omitempty"`

	// preview sdk int
	PreviewSdkInt string `json:"preview_sdk_int,omitempty"`

	// release
	Release string `json:"release,omitempty"`

	// sdk int
	SdkInt string `json:"sdk_int,omitempty"`

	// security patch
	SecurityPatch string `json:"security_patch,omitempty"`
}

// Validate validates this android device info version
func (m *AndroidDeviceInfoVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this android device info version based on context it is used
func (m *AndroidDeviceInfoVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AndroidDeviceInfoVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AndroidDeviceInfoVersion) UnmarshalBinary(b []byte) error {
	var res AndroidDeviceInfoVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
